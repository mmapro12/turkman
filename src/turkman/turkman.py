#!/usr/bin/env python3

import sys
import os
import requests
import subprocess
import typer
import tempfile
import shutil
from pathlib import Path
import json
import re
import turkman.db as turkmandb
import turkman.utils as utils
from rich.console import Console

console = Console()
turkmandb.init_db()
app = typer.Typer()
db_app = typer.Typer()
test_app = typer.Typer()

TURKMAN_COMMANDS = ["db", "update", "uninstall", "version", "--help", "manpage", "test"]
TRPATH = "/usr/share/man/tr/"
GITHUB_REPO = "mmapro12/turkmandb"
GITHUB_RAW_URL = f"https://raw.githubusercontent.com/{GITHUB_REPO}/refs/heads/main/pages/"
GITHUB_API_URL = "https://api.github.com/repos/mmapro12/turkman"


def check_local_translation(command: str) -> bool:
    """Yerel T√ºrk√ße man sayfasƒ±nƒ± kontrol eder."""
    try:
        command_path = subprocess.run(["man", "-w", "-L", "tr", command], capture_output=True, text=True)
        if command_path.returncode == 0 and TRPATH in command_path.stdout.strip():
            result = subprocess.run(["man", "-L", "tr", command], stdin=subprocess.DEVNULL)
            return result.returncode == 0
    except Exception as e:
        typer.echo(f"Yerel √ßeviri kontrol√ºnde hata: {e}")
    return False


def check_github_translation(command: str) -> str | None:
    """GitHub deposunda √ßeviri olup olmadƒ±ƒüƒ±nƒ± kontrol eder."""
    try:
        url = f"{GITHUB_RAW_URL}{command}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return response.text
    except Exception as e:
        typer.echo(f"GitHub √ßeviri kontrol√ºnde hata: {e}")
    return None


def check_db_translation(command: str) -> str | None:
    """Turkmandb'de √ßeviri olup olmadƒ±ƒüƒ±nƒ± kontrol eder."""
    try:
        return turkmandb.get_translation(command)
    except Exception as e:
        typer.echo(f"Veritabanƒ± √ßeviri kontrol√ºnde hata: {e}")
    return None


def check_command(command: str) -> bool:
    """Man sayfasƒ±nƒ±n olup olmadƒ±ƒüƒ±nƒ± kontrol eder."""
    try:
        path = subprocess.run(["man", "-w", command], capture_output=True, text=True, timeout=10)
        if path.returncode != 0 or not path.stdout.strip():
            return False
        
        man_path = path.stdout.strip()
        
        if not os.path.exists(man_path):
            typer.echo(f"Man sayfasƒ± dosyasƒ± bulunamadƒ±: {man_path}", err=True)
            return False
        
        if os.path.getsize(man_path) == 0:
            typer.echo(f"Man sayfasƒ± dosyasƒ± bo≈ü: {man_path}", err=True)
            return False
        
        test_result = subprocess.run(
            ["man", command], 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE, 
            stdin=subprocess.DEVNULL,
            timeout=5
        )
        
        return test_result.returncode == 0 and len(test_result.stdout) > 0
        
    except subprocess.TimeoutExpired:
        typer.echo(f"Man komutu zaman a≈üƒ±mƒ±na uƒüradƒ±: {command}", err=True)
        return False
    except Exception as e:
        typer.echo(f"Komut kontrol√ºnde hata: {e}", err=True)
        return False


def safe_man_display(content: str, command: str) -> bool:
    """Man sayfasƒ±nƒ± g√ºvenli bir ≈üekilde g√∂sterir."""
    try:
        import tempfile
        
        # Ge√ßici dosya olu≈ütur
        with tempfile.NamedTemporaryFile(mode='w', suffix=f'.{command}.man', delete=False) as temp_file:
            temp_file.write(content)
            temp_path = temp_file.name
        
        os.chmod(temp_path, 0o644)
        result = subprocess.run(["man", temp_path], stdin=subprocess.DEVNULL)
        os.unlink(temp_path)

        return result.returncode == 0
        
    except Exception as e:
        typer.echo(f"Man sayfasƒ± g√∂steriminde hata: {e}", err=True)
        return False


@app.command()
def uninstall(
    force: bool = typer.Option(False, "--force", "-f", help="Zorla kaldƒ±r, onay isteme"),
    keep_data: bool = typer.Option(False, "--keep-data", help="Kullanƒ±cƒ± verilerini sakla")
):
    """Turkman'ƒ± sistemden kaldƒ±rƒ±r."""
    console.print("üóëÔ∏è  Turkman Kaldƒ±rma ƒ∞≈ülemi")
    console.print("=" * 40)
    
    # Kurulum t√ºr√ºn√º tespit et
    apt_installed = utils.is_installed_via_apt()
    pip_installed = utils.is_installed_via_pip()
    executable_path = utils.get_turkman_executable_path()
    
    if not apt_installed and not pip_installed and not executable_path:
        typer.echo("‚ùå Turkman kurulu g√∂r√ºnm√ºyor!")
        raise typer.Exit(code=1)
    
    # Kurulum bilgilerini g√∂ster
    console.print("üìã Kurulum Durumu:")
    if apt_installed:
        console.print("   ‚Ä¢ APT paketi: ‚úÖ Kurulu")
    if pip_installed:
        console.print("   ‚Ä¢ Python paketi: ‚úÖ Kurulu")
    if executable_path:
        console.print(f"   ‚Ä¢ Executable: {executable_path}")
    
    # Kullanƒ±cƒ± verilerini kontrol et
    home_dir = Path.home()
    turkmandb_path = home_dir / ".turkmandb"
    has_user_data = turkmandb_path.exists()
    
    if has_user_data:
        console.print(f"üìÅ Kullanƒ±cƒ± verileri: {turkmandb_path}")
        if not keep_data:
            console.print("‚ö†Ô∏è  Kullanƒ±cƒ± verileri de silinecek!")
    
    # Onay al
    if not force:
        confirm = typer.confirm("Turkman'ƒ± kaldƒ±rmak istediƒüinizden emin misiniz?")
        if not confirm:
            console.print("‚ùå ƒ∞≈ülem iptal edildi.")
            raise typer.Exit(code=0)
    
    console.print("\nüîÑ Kaldƒ±rma i≈ülemi ba≈ülatƒ±lƒ±yor...")
    
    if apt_installed:
        try:
            console.print("üì¶ APT paketi kaldƒ±rƒ±lƒ±yor...")
            subprocess.run(["sudo", "apt", "remove", "-y", "turkman"], check=True)
            console.print("‚úÖ APT paketi kaldƒ±rƒ±ldƒ±!")
        except subprocess.CalledProcessError as e:
            console.print(f"‚ùå APT paketi kaldƒ±rma hatasƒ±: {e}")
        except Exception as e:
            console.print(f"‚ùå Beklenmeyen hata: {e}")
    
    if pip_installed:
        try:
            console.print("üêç Python paketi kaldƒ±rƒ±lƒ±yor...")
            subprocess.run(["pip", "uninstall", "-y", "turkman"], check=True)
            console.print("‚úÖ Python paketi kaldƒ±rƒ±ldƒ±!")
        except subprocess.CalledProcessError as e:
            console.print(f"‚ùå Python paketi kaldƒ±rma hatasƒ±: {e}")
        except Exception as e:
            console.print(f"‚ùå Beklenmeyen hata: {e}")
    
    # Manuel y√ºkleme dosyalarƒ±nƒ± kaldƒ±r
    if executable_path and "/usr/local/bin" in executable_path:
        try:
            console.print("üóÇÔ∏è  Manuel y√ºkleme dosyalarƒ± kaldƒ±rƒ±lƒ±yor...")
            os.remove(executable_path)
            console.print("‚úÖ Manuel y√ºkleme dosyalarƒ± kaldƒ±rƒ±ldƒ±!")
        except Exception as e:
            console.print(f"‚ùå Manuel dosya kaldƒ±rma hatasƒ±: {e}")
    
    # Kullanƒ±cƒ± verilerini kaldƒ±r
    if has_user_data and not keep_data:
        try:
            console.print("üóÑÔ∏è  Kullanƒ±cƒ± verileri kaldƒ±rƒ±lƒ±yor...")
            shutil.rmtree(turkmandb_path)
            console.print("‚úÖ Kullanƒ±cƒ± verileri kaldƒ±rƒ±ldƒ±!")
        except Exception as e:
            console.print(f"‚ùå Kullanƒ±cƒ± verisi kaldƒ±rma hatasƒ±: {e}")
    elif has_user_data and keep_data:
        console.print(f"üíæ Kullanƒ±cƒ± verileri korundu: {turkmandb_path}")
    
    console.print("\nüéâ Turkman ba≈üarƒ±yla kaldƒ±rƒ±ldƒ±!")
    if keep_data and has_user_data:
        console.print("üí° Verilerinizi tekrar kullanmak i√ßin Turkman'ƒ± yeniden y√ºkleyebilirsiniz.")


@app.command()
def update(
    force: bool = typer.Option(False, "--force", "-f", help="Zorla g√ºncelle, s√ºr√ºm kontrol√º yapma"),
    check_only: bool = typer.Option(False, "--check", "-c", help="Sadece g√ºncelleme kontrol√º yap")
):
    """Turkman'ƒ± g√ºnceller."""
    console.print("üîÑ Turkman G√ºncelleme ƒ∞≈ülemi")
    console.print("=" * 40)
    
    # Mevcut s√ºr√ºm√º al
    current_version = utils.get_version()
    console.print(f"üìã Mevcut s√ºr√ºm: {current_version}")
    
    # En son s√ºr√ºm√º kontrol et
    console.print("üîç en son s√ºr√ºm kontrol ediliyor...")
    release_info = utils.get_latest_release_info()
    
    if not release_info:
        console.print("‚ùå S√ºr√ºm bilgisi alƒ±namadƒ±. ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin.")
        raise typer.Exit(code=1)
    
    latest_version = release_info["tag_name"]
    console.print(f"üÜï En son s√ºr√ºm: {latest_version}")
    
    # S√ºr√ºm kar≈üƒ±la≈ütƒ±rmasƒ±
    needs_update = utils.compare_versions(current_version, latest_version)
    
    if not needs_update and not force:
        console.print("‚úÖ Turkman zaten en son s√ºr√ºmde!")
        if check_only:
            raise typer.Exit(code=0)
        
        update_anyway = typer.confirm("Yine de g√ºncelleme yapmak istiyor musunuz?")
        if not update_anyway:
            raise typer.Exit(code=0)
    
    if check_only:
        if needs_update:
            console.print("üîî G√ºncelleme mevcut!")
            console.print("üí° G√ºncellemek i√ßin: turkman update")
        else:
            console.print("‚úÖ G√ºncelleme gerekmiyor.")
        raise typer.Exit(code=0)
    
    # G√ºncelleme bilgilerini g√∂ster
    if needs_update or force:
        console.print("\nüìÑ S√ºr√ºm Notlarƒ±:")
        body = release_info.get("body", "S√ºr√ºm notlarƒ± mevcut deƒüil.")
        # Markdown'ƒ± basit metne √ßevir
        clean_body = re.sub(r'[#*`]', '', body)
        console.print(clean_body[:500] + "..." if len(clean_body) > 500 else clean_body)
    
    # Kurulum t√ºr√ºn√º tespit et
    apt_installed = utils.is_installed_via_apt()
    pip_installed = utils.is_installed_via_pip()
    
    # Onay al
    if not force:
        confirm = typer.confirm(f"\n{latest_version} s√ºr√ºm√ºne g√ºncellemek istiyor musunuz?")
        if not confirm:
            console.print("‚ùå G√ºncelleme iptal edildi.")
            raise typer.Exit(code=0)
    
    console.print("\nüöÄ G√ºncelleme ba≈ülatƒ±lƒ±yor...")
    
    # APT ile g√ºncelleme
    if apt_installed:
        try:
            console.print("üì¶ APT ile g√ºncelleme yapƒ±lƒ±yor...")
            
            # .deb dosyasƒ±nƒ± bul
            deb_asset = None
            for asset in release_info.get("assets", []):
                if asset["name"].endswith(".deb"):
                    deb_asset = asset
                    break
            
            if not deb_asset:
                console.print("‚ùå .deb dosyasƒ± bulunamadƒ±!")
                raise typer.Exit(code=1)
            
            # Ge√ßici dizin olu≈ütur
            with tempfile.TemporaryDirectory() as temp_dir:
                deb_path = os.path.join(temp_dir, deb_asset["name"])
                
                # .deb dosyasƒ±nƒ± indir
                if not utils.download_file(deb_asset["browser_download_url"], deb_path):
                    raise typer.Exit(code=1)
                
                # Paketi y√ºkle
                console.print("üì¶ Paket y√ºkleniyor...")
                subprocess.run(["sudo", "dpkg", "-i", deb_path], check=True)
                subprocess.run(["sudo", "apt", "install", "-f", "-y"], check=True)
                
                console.print("‚úÖ APT g√ºncelleme tamamlandƒ±!")
        
        except subprocess.CalledProcessError as e:
            console.print(f"‚ùå APT g√ºncelleme hatasƒ±: {e}")
            raise typer.Exit(code=1)
        except Exception as e:
            console.print(f"‚ùå Beklenmeyen hata: {e}")
            raise typer.Exit(code=1)
    
    # Python paketi ile g√ºncelleme
    elif pip_installed:
        try:
            console.print("üêç Python paketi g√ºncelleniyor...")
            subprocess.run(["pip", "install", "--upgrade", "turkman"], check=True)
            console.print("‚úÖ Python paketi g√ºncelleme tamamlandƒ±!")
        except subprocess.CalledProcessError as e:
            console.print(f"‚ùå Python paketi g√ºncelleme hatasƒ±: {e}")
            raise typer.Exit(code=1)
        except Exception as e:
            console.print(f"‚ùå Beklenmeyen hata: {e}")
            raise typer.Exit(code=1)
    
    else:
        try:
            console.print("üîß Manuel g√ºncelleme yapƒ±lƒ±yor...")
            install_script = """
            git clone https://github.com/mmapro12/turkman.git /tmp/turkman/
            cd /tmp/turkman/ && ./install.sh
            rm -rf /tmp/turkman/
            """
            subprocess.run(install_script, shell=True, check=True)
            console.print("‚úÖ Script g√ºncelleme tamamlandƒ±!")
        
        except Exception as e:
            console.print(f"‚ùå Manuel g√ºncelleme hatasƒ±: {e}")
            raise typer.Exit(code=1)
    
    # Veritabanƒ±nƒ± g√ºncelle
    try:
        console.print("üóÑÔ∏è  Veritabanƒ± g√ºncelleniyor...")
        turkmandb.get_turkmandb()
        console.print("‚úÖ Veritabanƒ± g√ºncellendi!")
    except Exception as e:
        console.print(f"‚ö†Ô∏è  Veritabanƒ± g√ºncelleme hatasƒ±: {e}")
        console.print("üí° 'turkman db sync' komutunu daha sonra √ßalƒ±≈ütƒ±rabilirsiniz.")
    
    # G√ºncelleme sonrasƒ± doƒürulama
    try:
        new_version = utils.get_version()
        console.print("\nüéâ G√ºncelleme tamamlandƒ±!")
        console.print(f"üìã Eski s√ºr√ºm: {current_version}")
        console.print(f"üìã Yeni s√ºr√ºm: {new_version}")
        
        if new_version != current_version:
            console.print("‚úÖ S√ºr√ºm ba≈üarƒ±yla g√ºncellendi!")
        else:
            console.print("‚ö†Ô∏è  S√ºr√ºm numarasƒ± deƒüi≈ümedi, kontrol edin.")
    
    except Exception as e:
        console.print(f"‚ùå S√ºr√ºm doƒürulama hatasƒ±: {e}")


@app.command()
def version():
    """Turkman s√ºr√ºm√ºn√º g√∂sterir."""
    console.print(f"Turkman CLI {utils.get_version()}")
    console.print(f"En yeni s√ºr√ºm: {utils.get_latest_version()}")


@app.command()
def manpage(command: str):
    """Belirtilen komut i√ßin T√ºrk√ße man sayfasƒ±nƒ± g√∂sterir."""
    # √ñnce yerel √ßeviriyi kontrol et
    if check_local_translation(command):
        return
    
    # Sonra veritabanƒ±nƒ± kontrol et
    db_translation = check_db_translation(command)
    if db_translation:
        console.print(f"üìñ '{command}' i√ßin T√ºrk√ße man sayfasƒ± g√∂steriliyor (veritabanƒ±ndan)...")
        if safe_man_display(db_translation, command):
            return
        else:
            console.print("Man sayfasƒ± g√∂steriminde sorun olu≈ütu.")
            return
    
    # GitHub'dan kontrol et (yedek olarak)
    github_translation = check_github_translation(command)
    if github_translation:
        console.print(f"üìñ '{command}' i√ßin T√ºrk√ße man sayfasƒ± g√∂steriliyor (GitHub'dan)...")
        if safe_man_display(github_translation, command):
            return
        else:
            console.print("Man sayfasƒ± g√∂steriminde sorun olu≈ütu, ham i√ßerik g√∂steriliyor:")
            console.print(github_translation)
            return

    console.print(f"‚ùå '{command}' i√ßin T√ºrk√ße √ßeviri bulunamadƒ±.")
    console.print(f"üí° Orijinal ƒ∞ngilizce man sayfasƒ±nƒ± g√∂rmek i√ßin: man {command}")


@db_app.command()
def sync():
    """Turkmandb'nin en yeni s√ºr√ºm√ºn√º getirir."""
    try:
        turkmandb.init_db()
        console.print("üîÑ Veritabanƒ± senkronize ediliyor...")
        turkmandb.get_turkmandb()
        console.print("‚úÖ Veritabanƒ± senkronizasyonu tamamlandƒ±!")
    except Exception as e:
        console.print(f"‚ùå Veritabanƒ± senkronizasyonunda hata: {e}")


@db_app.command()
def init():
    """Turkmandb'yi .turkmandb dizini altƒ±nda olu≈üturur."""
    try:
        turkmandb.init_db()
        console.print("‚úÖ Veritabanƒ± ba≈ülatƒ±ldƒ±!")
    except Exception as e:
        console.print(f"‚ùå Veritabanƒ± ba≈ülatmada hata: {e}")


@test_app.command()
def push():
    """Bu bir test komutudur."""
    typer.echo("Merhaba ertu karde≈ü.")


def handle_man_command(command: str):
    """Man sayfasƒ± komutunu i≈üler."""
    console.print(f"üîç '{command}' komutu ara≈ütƒ±rƒ±lƒ±yor...")
    
    if check_command(command):
        manpage(command)
    else:
        console.print(f"‚ùå '{command}' adƒ±nda bir komut bulunamadƒ± veya man sayfasƒ± okunamƒ±yor.")
        
        try:
            result = subprocess.run(["man", "-w", command], capture_output=True, text=True)
            if result.returncode == 0:
                console.print(f"üîß Debug: Man sayfasƒ± yolu bulundu ama okunamƒ±yor: {result.stdout.strip()}")
            else:
                console.print(f"üîß Debug: Man sayfasƒ± yolu bulunamadƒ±")
        except Exception as e:
            console.print(f"üîß Debug: Komut kontrol√ºnde hata: {e}")
        
        console.print(f"üí° Alternatif √ß√∂z√ºmler:")
        console.print(f"   ‚Ä¢ Orijinal man sayfasƒ±nƒ± deneyin: man {command}")
        console.print(f"   ‚Ä¢ Komut doƒüru yazƒ±ldƒ± mƒ± kontrol edin")
        console.print(f"   ‚Ä¢ Man sayfalarƒ± g√ºncel mi kontrol edin: sudo mandb")
        
        raise typer.Exit(code=1)


def main():
    """Ana akƒ±≈ü."""
    try:
        if len(sys.argv) > 1:
            utils.check_updates(sys.argv[1])
        
        if len(sys.argv) > 1:
            first_arg = sys.argv[1]
            if first_arg in TURKMAN_COMMANDS:
                app()
            else:
                handle_man_command(first_arg)
        else:
            app()
    except KeyboardInterrupt:
        console.print("\nüö´ ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan iptal edildi.")
        sys.exit(1)
    except Exception as e:
        console.print(f"‚ùå Beklenmeyen hata: {e}")
        sys.exit(1)


app.add_typer(db_app, name="db")
app.add_typer(test_app, name="test")

if __name__ == "__main__":
    main()


